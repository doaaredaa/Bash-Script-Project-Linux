#! usr/bin/bash 
while true; do
    read -p "Please Enter your Table Name: " tb_name
    tb_name=$(echo "$tb_name" | tr ' ' '_') # Replace spaces with underscores
    if [ -z "$tb_name" ]; then
        echo "Not Allowed! Table name can't be empty."
        continue # Go back to asking for the name again  

    elif ! validate_letters_numbers_specific_place "$tb_name"; then
        echo "Invalid input! Table names must start with a letter & Max length is 20."
        continue # Go back to asking for the name again

    elif [ -e "$HOME/dbms/$db_name/$tb_name" ]; then
        cd "$HOME/dbms/$db_name/$tb_name" || exit
        
        # File paths
        metadata_file="$HOME/dbms/$db_name/$tb_name/${tb_name}.metadata"
        data_file="$HOME/dbms/$db_name/$tb_name/${tb_name}.data"
        
        # Extract columns and datatypes
        mapfile -t columns_source < <(awk -F: '{print $1}' "$metadata_file")
        #mapfile reads lines of input into an array (columns_source), -t removes the trailing newlines from each line read.
        #extract the first column (column names)
        mapfile -t datatypes_source < <(awk -F: '{print $2}' "$metadata_file")
        #extract the second column (datatypes of columns)
        echo "Successfully connected to \"$tb_name\" table."
        #----------------------------------------------
        while true;
        do
            echo "********************************************"
            echo "       *** DELETE TABLE MENU ***            "
            echo "********************************************"
            PS3="Please select the option you want from (Delete table Menu): "
            select option in \
                "Delete all data" \
                "Delete By Primary Key" \
                "Delete By Specific Column" \
                "Exit"; do
                case $option in
                
                "Delete all data")
                    echo "Are you sure you want to delete all data from table \"$tb_name\"?"
                    PS3="Please Choose Option: "
                    select y_n in "Yes" "No"; do
                        case $y_n in
                        "Yes")
                            sed -i '1,$d' "$data_file"
                            if [ ! -e "$HOME/dbms/$db_name/$tb_name/${tb_name}.data" ]; then
                                echo "All data deleted successfully from table \"$tb_name\""
                            fi
                            break 2
                            ;;
                        "No")
                            if [ -e "$HOME/dbms/$db_name/$tb_name/${tb_name}.data" ]; then
                                # If they said no, the table still exists!
                                echo "Your Table \"$tb_name\" is not erased, You are safe"
                            fi
                            break 2
                            ;;
                        esac
                    done
                    ;;
                
                "Delete By Primary Key")
                    echo "Successfully accessed \"$tb_name\" table."
                    #--------------------------------DELETE DATA-----------------------------
                    # Prompt user to input primary key value
                    read -p "Please Enter the Primary Key value: " user_pk
                    pk_exists=$(awk -F: -v pk="$user_pk" '{if ($1 == pk) print $1}' "$data_file" | wc -l)
                    # Check if the primary key exists
                    if [ "$pk_exists" -eq 0 ]; then
                        echo "Primary key \"$user_pk\" not found."
                    else
                        sed -i "/^$user_pk:/d" "$data_file" # To delete the whole record
                        echo "Record with primary key \"$user_pk\" deleted successfully."
                    fi
                    break
                    ;;
                
                "Delete By Specific Column")
                    echo "Successfully accessed \"$tb_name\" table."
                    
                    PS3="Select the column to apply condition: "
                    select column_condition in "${columns_source[@]}" "Exit"; do
                        if [ "$column_condition" == "Exit" ]; then
                            echo "Exiting condition selection."
                            break
                        fi
                    
                        # After the user chooses the column, extract its position
                        column_index=$(echo "${columns_source[@]}" | tr ' ' '\n' | grep -n -w "$column_condition" | cut -d: -f1)
                        # Extract the exact position of the column.
                        
                        # Prompt user to enter condition value
                        read -p "Enter value for column \"$column_condition\": " condition_value
                        condition_datatype="${datatypes_source[$((column_index - 1))]}" # Retrieve the datatype of the column the user selected.
                        
                        # Validate condition value
                        if { [[ "$condition_datatype" == "Integer" ]] && get_positive_integer "$condition_value"; } || \
                           { [[ "$condition_datatype" == "String" ]] && validate_letters_spaces "$condition_value"; }; then
                        
                            awk -v col="$column_index" -v val="$condition_value" -F: \
                            '$col != val {print}' "$data_file" > updated_version && mv updated_version "$data_file"
                            echo "Rows matching \"$condition_value\" in column \"$column_condition\" deleted successfully."
                        else
                            echo "Invalid value for column \"$column_condition\". Expected type: \"$condition_datatype\"."
                        fi
                        break
                    done
                    break
                    ;;
                
                "Exit")
                    break 3
                    ;;
                
                *)
                    echo "Unknown option! Please try again."
                    ;;        
                esac
            done
        done
        #--------------------DATA UPDATED SUCCESSFULLY----------------------------------------
    else
        echo "This Table \"$tb_name\" does not exist. Please try again!"
        continue # Retry asking for the table name    
    fi
    break # Exit the loop after successful operation    
done
echo "Returning to secondary menu..." # Final messages
