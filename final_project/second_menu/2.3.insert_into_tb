#! /usr/bin/bash
while true; do
    read -p "Please Enter your Table Name: " tb_name
    tb_name=$(echo "$tb_name" | tr ' ' '_') # Replace spaces with underscores
	if [ -z "$tb_name" ]; then
		echo "Not Allowed! Table name can't be empty."
		continue # Go back to asking for the name again	
		
	elif ! validate_letters_numbers_specific_place "$tb_name"; then
        	echo "Invalid input! Table names must start with a letter."
		continue # Go back to asking for the name again
		
	elif [ -e "$HOME/dbms/$db_name/$tb_name" ]; then
        	cd "$HOME/dbms/$db_name/$tb_name" || exit
        	echo "Successfully Connected to \"$tb_name\"."
        	
        	# File paths
       		metadata_file="$HOME/dbms/$db_name/$tb_name/${tb_name}.metadata"
        	data_file="$HOME/dbms/$db_name/$tb_name/${tb_name}.data"
        	
        	# Check if required files exist
        	if [[ ! -f "$metadata_file" || ! -f "$data_file" ]]; then
          	  echo "Cannot select data. Table structure is incomplete."
         	  exit 1
       		fi
       		
		#Here I Extract (columns names & datatype) from metadata to use in insert
		columns_source=() #this array will use in insert to ensuring data integrity
		datatypes_source=() #this array will use in insert to ensuring datatype integrity
		
		#IFS here is used as Separator in shell general not awk specific 
		#read -r to read values as it is without changing.
		while IFS=":" read -r  source_name source_datatype source_pk ; do 
		#i used variable here io ensure & compare if this column is pk or just normal column 
			if [[ "$source_pk" == "PK" ]]; then
				pk_source="$source_pk" #this variable will use in insert to ensuring data integrity
				pk_datatype_source="$source_datatype" #this variable will use in insert to ensuring data integrity
			else
				columns_source+=("$source_name") #columns is list vs source is just one element 
				datatypes_source+=("$source_datatype") #datatypes is list vs source is just one datatype 
			fi	
		done < "$metadata_file"
		#------------------PK Input Validation--------------------
		row_line=()
		while true; do
		read -p "Enter Value for ("$pk_source") ("$pk_datatype_source"): " pk_data
			if [ -z "$pk_data" ]; then
				echo "Not Allowed! PK can't be empty."
				continue # Go back to asking for the data again
					
			elif [ "$pk_datatype_source" == "Integer" ] && ! get_positive_integer "$pk_data"; then
              			echo "Invalid input. Please enter a positive integer."
              			continue
           		elif [ "$pk_datatype_source" == "String" ] && ! validate_letters_spaces "$pk_data"; then
           			echo "Invalid input. Please enter a valid string."
            			continue
            		elif grep -q "^$pk_data:" "$data_file" ; then
       				echo "Duplicate Primary Key! Value must be unique."
       				continue
       			else	
     				break
			fi
		done
		# Append the PK value at the beginning of the row before other columns
    		row_line=("$pk_data")
		#---------------Columns Input Validation----------------
		for (( i=0; i<${#columns_source[@]}; i++ )); do #it gives me size of array (no_of_columns)
		i_source_name="${columns_source[$i]}" 
		i_source_datatype="${datatypes_source[$i]}" 
		while true; do
		read -p "Enter Value for ("$i_source_name") ("$i_source_datatype"): " data
		if [ -z "$data" ]; then
			echo "Not Allowed! Values can't be empty."
			continue # Go back to asking for the data again
					
		elif [ "$i_source_datatype" == "Integer" ] && ! get_positive_integer "$data"; then
                    	echo "Invalid input. Please enter a positive integer."
                    	continue
                elif [ "$i_source_datatype" == "String" ] && ! validate_letters_spaces "$data"; then
                    	echo "Invalid input. Please enter a valid string."
                    	continue
                else
    			row_line=("$row_line:$data")
                    	break #success
		fi	
		done #close while
		done #close for
			
		# Append data to the table
       		echo "$row_line"  >> "$data_file"
       		echo "Data inserted successfully: ${row_line[*]}"
        	#---------------------------	
	else
        	echo "This Table \"$tb_name\" does not exist. Please try again!"
       		continue # Retry asking for the table name	
	fi
	#-----------Insert Into successfully created-----------------				
	break # Exit the loop after successful operation	
done
echo "Returning to secondary menu..." # Final messages
