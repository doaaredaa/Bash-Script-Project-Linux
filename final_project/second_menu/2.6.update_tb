#!/usr/bin/bash

# Infinite loop to continuously prompt for a valid table name
while true; do
    # Prompt the user to enter the table name
    read -p "Please Enter your Table Name: " tb_name

    # Replace spaces in the table name with underscores
    tb_name=$(echo "$tb_name" | tr ' ' '_')

    # Check if the table name is empty
    if [ -z "$tb_name" ]; then
        echo "Not Allowed! Table name can't be empty."  # Error message if the table name is empty
        continue  # Ask for the table name again

    # Check if the table name is valid (must start with a letter and max length 20)
    elif ! validate_letters_numbers_specific_place "$tb_name"; then
        echo "Invalid input! Table names must start with a letter & Max length is 20."  # Error message for invalid table name
        continue  # Ask for the table name again

    # Check if the table exists in the database path
    elif [ -e "$HOME/dbms/$db_name/$tb_name" ]; then
        # Change directory to the specified table location
        cd "$HOME/dbms/$db_name/$tb_name" || exit  # Exit if unable to navigate to the directory
        echo "Successfully Connected to \"$tb_name\"."  # Inform user of successful connection to the table

        # Define file paths for metadata and data files
        metadata_file="$HOME/dbms/$db_name/$tb_name/${tb_name}.metadata"
        data_file="$HOME/dbms/$db_name/$tb_name/${tb_name}.data"

        # Check if both metadata and data files exist
        if [[ ! -f "$metadata_file" || ! -f "$data_file" ]]; then
            echo "Cannot select data. Table structure is incomplete."  # Error message if any file is missing
            exit 1  # Exit the script due to incomplete table structure
        fi

        # Initialize arrays to store column names and data types
        columns_source=()
        datatypes_source=()

        # Read the metadata file to extract column names, data types, and primary key info
        while IFS=":" read -r source_name source_datatype source_pk; do
            columns_source+=("$source_name")  # Add column name to the array
            datatypes_source+=("$source_datatype")  # Add data type to the array
            if [[ "$source_pk" == "PK" ]]; then  # If the column is a primary key
                pk_column="$source_name"  # Set the primary key column
                pk_index="${#columns_source[@]}"  # Get the index of the primary key column (1-based)
            fi
        done < "$metadata_file"  # Read from the metadata file

        # Inner loop to present the update menu for table modification options
        while true; do
            echo "********************************************"
            echo "       *** UPDATE TABLE MENU ***            "
            echo "********************************************"
            PS3="Please select the option you want from (Update table Menu): "  # Prompt for menu selection
            select option in \
                "Update By Primary Key" \  # Option 1: Update by primary key
                "Update By Specific Column" \  # Option 2: Update by specific column
                "Exit"; do  # Option 3: Exit the menu
                case $option in
                    # Option to update a record by primary key
                    "Update By Primary Key")
                        echo "Accessing \"$tb_name\" table to update by primary key."
                        read -p "Please Enter the Primary Key value: " user_pk  # Prompt for primary key value

                        # Check if the primary key exists in the data file
                        pk_exists=$(awk -F: -v pk="$user_pk" '{if ($1 == pk) print $1}' "$data_file" | wc -l)

                        # If primary key exists, allow updating
                        if [ "$pk_exists" -gt 0 ]; then
                            PS3="Select the column to update: "  # Prompt to select column for update
                            select column_to_update in "${columns_source[@]}" "Exit"; do  # List available columns
                                if [ "$column_to_update" == "Exit" ]; then  # Option to exit column selection
                                    echo "Exiting column selection."
                                    break
                                fi

                                # Find the index of the selected column
                                column_index=$(echo "${columns_source[@]}" | tr ' ' '\n' | grep -n -w "$column_to_update" | cut -d: -f1) # -w exact word match 
                                read -p "Enter new value for $column_to_update: " new_value  # Prompt for new value
                                new_datatype="${datatypes_source[$((column_index - 1))]}"  # Get the datatype of the selected column

                                # If the selected column is the primary key, ensure the new value is unique
                                if [[ "$column_to_update" == "$pk_column" ]]; then
                                    pk_duplicate_check=$(awk -F: -v new_pk="$new_value" '{if ($1 == new_pk) print $1}' "$data_file" | wc -l)
                                    if [ "$pk_duplicate_check" -gt 0 ]; then
                                        echo "Error: New Primary Key value \"$new_value\" already exists. Primary Key must be unique."
                                        continue
                                    fi
                                fi

                                # Validate the input based on the column's datatype
                                if { [[ "$new_datatype" == "Integer" ]] && get_positive_integer "$new_value"; } || \
                                   { [[ "$new_datatype" == "String" ]] && validate_letters_spaces "$new_value"; }; then
                                    # Update the value in the file if validation passes
                                    awk -v pk="$user_pk" -v col="$column_index" -v value="$new_value" -F: \
                                    '$1 == pk {$col = value}1' OFS=: "$data_file" > updated_version && mv updated_version "$data_file"
                                    echo "Successfully updated the record."  # Inform user of successful update
                                else
                                    echo "Invalid value for column \"$column_to_update\". Expected type: \"$new_datatype\"."
                                fi
                                break
                            done
                        else
                            echo "Primary key value \"$user_pk\" not found."  # Error if PK value is not found
                        fi
                        break
                        ;;

                    # Option to update records by specific column condition
                    "Update By Specific Column")
                        echo "Accessing \"$tb_name\" table to update by specific column."
                        PS3="Select the column to apply condition: "  # Prompt for column to apply condition
                        select column_condition in "${columns_source[@]}" "Exit"; do  # List available columns
                            if [ "$column_condition" == "Exit" ]; then  # Option to exit condition selection
                                echo "Exiting condition selection."
                                break
                            fi

                            # Find the index of the selected column for condition
                            column_condition_index=$(echo "${columns_source[@]}" | tr ' ' '\n' | grep -n -w "$column_condition" | cut -d: -f1)
                            read -p "Enter value for column \"$column_condition\": " condition_value  # Prompt for condition value
                            condition_datatype="${datatypes_source[$((column_condition_index - 1))]}"  # Get datatype of the condition column

                            # Validate the input value based on the column's datatype
                            if { [[ "$condition_datatype" == "Integer" ]] && get_positive_integer "$condition_value"; } || \
                               { [[ "$condition_datatype" == "String" ]] && validate_letters_spaces "$condition_value"; }; then
                                matching_rows=()
                                # Loop through the data file and find rows that match the condition
                                while IFS= read -r line; do
                                    column_value=$(echo "$line" | cut -d: -f"$column_condition_index")  # Extract the value of the condition column
                                    if [[ "$column_value" == "$condition_value" ]]; then
                                        matching_rows+=("$line")  # Add matching rows to the array
                                    fi
                                done < "$data_file"

                                # If matching rows are found, prompt user to select which column to update
                                if [ ${#matching_rows[@]} -gt 0 ]; then
                                    echo "Matching rows found:"
                                    for row in "${matching_rows[@]}"; do
                                        echo "$row"  # Display matching rows
                                    done

                                    PS3="Select column to update: "  # Prompt to select column for update
                                    select column_to_update in "${columns_source[@]}" "Exit"; do
                                        if [ "$column_to_update" == "Exit" ]; then  # Option to exit column selection
                                            echo "Exiting column selection."
                                            break
                                        fi

                                        # Find the index of the selected column to update
                                        column_index=$(echo "${columns_source[@]}" | tr ' ' '\n' | grep -n -w "$column_to_update" | cut -d: -f1)
                                        read -p "Enter new value for column \"$column_to_update\": " new_value  # Prompt for new value
                                        new_datatype="${datatypes_source[$((column_index - 1))]}"  # Get datatype of selected column

                                        # Validate the new value before updating
                                        if { [[ "$new_datatype" == "Integer" ]] && get_positive_integer "$new_value"; } || \
                                           { [[ "$new_datatype" == "String" ]] && validate_letters_spaces "$new_value"; }; then
                                            # Update matching rows with the new value
                                            for row in "${matching_rows[@]}"; do
                                                user_pk=$(echo "$row" | cut -d: -f1)  # Get primary key of the row
                                                awk -v pk="$user_pk" -v col="$column_index" -v value="$new_value" -F: \
                                                '$1 == pk {$col = value}1' OFS=: "$data_file" > updated_version && mv updated_version "$data_file"
                                            done
                                            echo "Successfully updated matching rows."  # Inform user of successful update
                                        else
                                            echo "Invalid value for column \"$column_to_update\". Expected type: \"$new_datatype\"."
                                        fi
                                        break
                                    done
                                else
                                    echo "No matching rows found for the value \"$condition_value\" in column \"$column_condition\"."
                                fi
                            else
                                echo "Invalid value for condition column \"$column_condition\"."
                            fi
                            break
                        done
                        break
                        ;;

                    # Option to exit the update menu
                    "Exit")
                        break 3
                        ;;

                    # Invalid menu option
                    *)
                        echo "Unknown option! Please try again."
                        ;;
                esac
            done
        done
    else
        echo "This Table \"$tb_name\" does not exist. Please try again!"  # Error message if table doesn't exist
        continue  # Ask for the table name again
    fi
    break  # Exit the outer loop after a successful table connection
done

# Inform user that they are returning to the secondary menu
echo "Returning to secondary menu..."


